#prime # method, methods are helpful for debugging, readability, reusability, separation of concerns and more!
def prime(n)
  puts "That's not an integer." unless n.is_a? Integer
  is_prime = true
  for i in 2..n-1
    if n % i == 0
      is_prime = false
    end
  end
  if is_prime
    puts "#{n} is prime!"
  else
    puts "#{n} is not prime."
  end
end

prime(2)
prime(9)
prime(11)
prime(51)
prime(97)

#interesting counter method
def puts_1_to_10
  (1..10).each { |i| puts i }
end

#Calling methods

def array_of_10
  puts (1..10).to_a
end

array_of_10

#parameters
def cubertino(n)
  puts n ** 3
end

cubertino(8)

#Splat arguements
def what_up(greeting, *bros)
  bros.each { |bro| puts "#{greeting}, #{bro}!" }
end
 
what_up("What up", "Justin", "Ben", "Kevin Sorbo")

#return
puts "Give 1st numbah"
num1 = gets.chomp

puts "Give 2nd numbah"
num2 = gets.chomp

def add(num1, num2)
    return num1 + num2
    
    def greeter(name)
    puts "Hello " + name + "!"
end

def by_three?(number)
    return number % 3 == 0
end

#blocks, lambdas, unnamed methods
1.times do
  puts "I'm a code block!"
end

1.times { puts "As am I!" }
end

# method that capitalizes a word
def capitalize(string) 
  puts "#{string[0].upcase}#{string[1..-1]}"
end

capitalize("ryan") # prints "Ryan"
capitalize("jane") # prints "Jane"

# block that capitalizes each string in the array
["ryan", "jane"].each {|string| puts "#{string[0].upcase}#{string[1..-1]}"} # prints "Ryan", then "Jane"

#Abstraction, passing a block as a parameter
# The block, {|i| puts i}, is passed the current
# array item each time it is evaluated. This block
# prints the item. 
[1, 2, 3, 4, 5].each { |i| puts i }
# This block prints the number 5 for each item.
# (It chooses to ignore the passed item, which is allowed.)

#sorting made easy
my_array = [3, 4, 8, 7, 1, 6, 5, 9, 2]

# Call the sort! method on my_array below.
# my_array should then equal [1, 2, 3, 4, 5, 6, 7, 8, 9].

puts my_array.sort!
puts my_array.reverse
puts my_array

# library sorting code
books = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A Brief History of Time", "A Wrinkle in Time"]

# How might we sort! the books in alphabetical order? (Hint, hint)
books.sort!

[1, 2, 3, 4, 5].each { |i| puts i*5 }

#combined comparison operator, 0 if equal, 1 if greater, -1 if less than.
book_1 = "A Wrinkle in Time"

book_2 = "A Brief History of Time"

return book_1 <=> book_2
